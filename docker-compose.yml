version: "3.8" 

services:
  # Frontend server using React

  web:
    build: ./client
    restart: always
    ports:
      - "${WEB_PORT}:3000"
    environment:
      - BACKEND_URL=http://backend:${BACKEND_PORT}
    develop:
      watch:
        - action: rebuild
          path: ./client/package.json
        - action: sync
          path: ./client/src/
          target: /app/src/
          ignore:
            - node_modules/
    depends_on:
      - backend

  # Backend server using NestJS for creating server
  backend:
    # Path to Dockerfile for backend server
    build: ./server

    restart: always

    develop:
      watch:
        - action: rebuild
          path: ./server/package.json
        - action: sync
          path: ./server/src/
          target: /app/src/
          ignore:
            - node_modules/

    # Port for connection
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"

    # Add environment variables
    environment:
      - PORT=${BACKEND_PORT}
      # Database variables
      - DATABASE_HOST=${POSTGRES_HOST}
      - DATABASE_PORT=${POSTGRES_PORT}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_DB=${POSTGRES_DB}

    depends_on:
      - db
  # Database server using PostgreSQL
  db:
    image: postgres:latest
    restart: always

    # Set shared memory limit when using docker-compose
    shm_size: 128mb
    # Set database settings
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

    ports:
      - "5432:5432"

    # Get db files in folder
    volumes:
      - ./database:/var/lib/postgresql/data

  # Adminer web-based database client
  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "${ADMINER_PORT}:8080" # Adminer by default listens on port 8080
    depends_on:
      - db

# Volumes
volumes:
  database:
    driver: local
